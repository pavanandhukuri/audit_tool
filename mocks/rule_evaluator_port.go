// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	entities "security_audit_tool/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// RuleEvaluatorPort is an autogenerated mock type for the RuleEvaluatorPort type
type RuleEvaluatorPort struct {
	mock.Mock
}

// EvaluateRules provides a mock function with given fields: rules, data
func (_m *RuleEvaluatorPort) EvaluateRules(rules []entities.Rule, data map[string]interface{}) (*entities.ValidationResult, error) {
	ret := _m.Called(rules, data)

	if len(ret) == 0 {
		panic("no return value specified for EvaluateRules")
	}

	var r0 *entities.ValidationResult
	var r1 error
	if rf, ok := ret.Get(0).(func([]entities.Rule, map[string]interface{}) (*entities.ValidationResult, error)); ok {
		return rf(rules, data)
	}
	if rf, ok := ret.Get(0).(func([]entities.Rule, map[string]interface{}) *entities.ValidationResult); ok {
		r0 = rf(rules, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ValidationResult)
		}
	}

	if rf, ok := ret.Get(1).(func([]entities.Rule, map[string]interface{}) error); ok {
		r1 = rf(rules, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRuleEvaluatorPort creates a new instance of RuleEvaluatorPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRuleEvaluatorPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *RuleEvaluatorPort {
	mock := &RuleEvaluatorPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
