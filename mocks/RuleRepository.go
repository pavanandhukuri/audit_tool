// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	"security_audit_tool/domain/entities"
)

// RuleRepository is an autogenerated mock type for the RuleRepository type
type RuleRepository struct {
	mock.Mock
}

// GetRules provides a mock function with given fields:
func (_m *RuleRepository) GetRules() ([]entities.Rule, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRules")
	}

	var r0 []entities.Rule
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entities.Rule, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entities.Rule); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Rule)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRuleRepository creates a new instance of RuleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRuleRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *RuleRepository {
	mock := &RuleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
